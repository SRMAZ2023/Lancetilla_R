// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Lancetilla.Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Lancetilla.DataAccess.Context
{
    public partial class Db_LancetillaContext : DbContext
    {
        public Db_LancetillaContext()
        {
        }

        public Db_LancetillaContext(DbContextOptions<Db_LancetillaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<tbAlimentacion> tbAlimentacion { get; set; }
        public virtual DbSet<tbAnimales> tbAnimales { get; set; }
        public virtual DbSet<tbAreasBotanicas> tbAreasBotanicas { get; set; }
        public virtual DbSet<tbAreasZoologico> tbAreasZoologico { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbCuidados> tbCuidados { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEspecies> tbEspecies { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbFacturas> tbFacturas { get; set; }
        public virtual DbSet<tbFacturasDetalles> tbFacturasDetalles { get; set; }
        public virtual DbSet<tbMantenimientos> tbMantenimientos { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPlantas> tbPlantas { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbRolesPantallas> tbRolesPantallas { get; set; }
        public virtual DbSet<tbTickets> tbTickets { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }
        public virtual DbSet<tbVisitantes> tbVisitantes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<tbAlimentacion>(entity =>
            {
                entity.HasKey(e => e.alim_Id)
                    .HasName("PK__tbAlimen__E14BE4FC2BE0C7A9");

                entity.ToTable("tbAlimentacion", "zool");

                entity.Property(e => e.alim_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.alim_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.alim_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.alim_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.alim_UserCreacionNavigation)
                    .WithMany(p => p.tbAlimentacionalim_UserCreacionNavigation)
                    .HasForeignKey(d => d.alim_UserCreacion)
                    .HasConstraintName("FK_zool_tbAlimentacion_alim_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.alim_UserModificacionNavigation)
                    .WithMany(p => p.tbAlimentacionalim_UserModificacionNavigation)
                    .HasForeignKey(d => d.alim_UserModificacion)
                    .HasConstraintName("FK_zool_tbAlimentacion_alim_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbAnimales>(entity =>
            {
                entity.HasKey(e => e.anim_Id)
                    .HasName("PK__tbAnimal__565C1AC6475451BB");

                entity.ToTable("tbAnimales", "zool");

                entity.HasIndex(e => e.anim_NombreCientifico, "FK_zool_tbAnimales_anim_NombreCientifico")
                    .IsUnique();

                entity.Property(e => e.anim_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.anim_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.anim_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.anim_Habitat)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.anim_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.anim_NombreCientifico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.anim_Reino)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.alim)
                    .WithMany(p => p.tbAnimales)
                    .HasForeignKey(d => d.alim_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_zool_tbAnimales_alim_Id_zool_tbAlimetacion_alim_Id");

                entity.HasOne(d => d.anim_UserCreacionNavigation)
                    .WithMany(p => p.tbAnimalesanim_UserCreacionNavigation)
                    .HasForeignKey(d => d.anim_UserCreacion)
                    .HasConstraintName("FK_zool_tbAnimales_anim_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.anim_UserModificacionNavigation)
                    .WithMany(p => p.tbAnimalesanim_UserModificacionNavigation)
                    .HasForeignKey(d => d.anim_UserModificacion)
                    .HasConstraintName("FK_zool_tbAnimales_anim_UserModificacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.arzo)
                    .WithMany(p => p.tbAnimales)
                    .HasForeignKey(d => d.arzo_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_zool_tbAnimales_arzo_Id_zool_tbAreasZoologico_arzo_Id");

                entity.HasOne(d => d.espe)
                    .WithMany(p => p.tbAnimales)
                    .HasForeignKey(d => d.espe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_zool_tbAnimales_espe_Id_zool_tbEspecies_espe_Id");
            });

            modelBuilder.Entity<tbAreasBotanicas>(entity =>
            {
                entity.HasKey(e => e.arbo_Id)
                    .HasName("PK__tbAreasB__D7D76ECAB106DC2A");

                entity.ToTable("tbAreasBotanicas", "bota");

                entity.Property(e => e.arbo_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.arbo_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.arbo_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.arbo_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.arbo_UserCreacionNavigation)
                    .WithMany(p => p.tbAreasBotanicasarbo_UserCreacionNavigation)
                    .HasForeignKey(d => d.arbo_UserCreacion)
                    .HasConstraintName("FK_bota_tbAreasBotanicas_arbo_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.arbo_UserModificacionNavigation)
                    .WithMany(p => p.tbAreasBotanicasarbo_UserModificacionNavigation)
                    .HasForeignKey(d => d.arbo_UserModificacion)
                    .HasConstraintName("FK_bota_tbAreasBotanicas_arbo_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbAreasZoologico>(entity =>
            {
                entity.HasKey(e => e.arzo_Id)
                    .HasName("PK__tbAreasZ__A6877503DE1DF73E");

                entity.ToTable("tbAreasZoologico", "zool");

                entity.Property(e => e.arzo_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.arzo_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.arzo_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.arzo_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.arzo_UserCreacionNavigation)
                    .WithMany(p => p.tbAreasZoologicoarzo_UserCreacionNavigation)
                    .HasForeignKey(d => d.arzo_UserCreacion)
                    .HasConstraintName("FK_zool_tbAreasZoologico_arzo_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.arzo_UserModificacionNavigation)
                    .WithMany(p => p.tbAreasZoologicoarzo_UserModificacionNavigation)
                    .HasForeignKey(d => d.arzo_UserModificacion)
                    .HasConstraintName("FK_zool_tbAreasZoologico_arzo_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK__tbCargos__7299C3E6B3614EF1");

                entity.ToTable("tbCargos", "mant");

                entity.Property(e => e.carg_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.carg_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.carg_UserCreacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UserCreacionNavigation)
                    .HasForeignKey(d => d.carg_UserCreacion)
                    .HasConstraintName("FK_mant_tbCargos_carg_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.carg_UserModificacionNavigation)
                    .WithMany(p => p.tbCargoscarg_UserModificacionNavigation)
                    .HasForeignKey(d => d.carg_UserModificacion)
                    .HasConstraintName("FK_mant_tbCargos_carg_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCuidados>(entity =>
            {
                entity.HasKey(e => e.cuid_Id)
                    .HasName("PK__tbCuidad__A5CC5EAAD4D8CEB3");

                entity.ToTable("tbCuidados", "bota");

                entity.Property(e => e.cuid_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.cuid_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.cuid_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cuid_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cuid_Frecuencia)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cuid_UserCreacionNavigation)
                    .WithMany(p => p.tbCuidadoscuid_UserCreacionNavigation)
                    .HasForeignKey(d => d.cuid_UserCreacion)
                    .HasConstraintName("FK_bota_tbCuidad_cuid_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.cuid_UserModificacionNavigation)
                    .WithMany(p => p.tbCuidadoscuid_UserModificacionNavigation)
                    .HasForeignKey(d => d.cuid_UserModificacion)
                    .HasConstraintName("FK_bota_tbCuidad_cuid_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.dept_Id)
                    .HasName("PK__tbDepart__DCA97B6C2B4D4418");

                entity.ToTable("tbDepartamentos", "mant");

                entity.Property(e => e.dept_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.dept_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.dept_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.dept_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.dept_UserCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdept_UserCreacionNavigation)
                    .HasForeignKey(d => d.dept_UserCreacion)
                    .HasConstraintName("FK_mant_tbDepartamento_dept_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.dept_UserModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdept_UserModificacionNavigation)
                    .HasForeignKey(d => d.dept_UserModificacion)
                    .HasConstraintName("FK_mant_tbDepartamento_dept_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empl_Id)
                    .HasName("PK__tbEmplea__4772AE317C0D1B85");

                entity.ToTable("tbEmpleados", "mant");

                entity.HasIndex(e => e.empl_Identidad, "UK_mant_tbEmpleados_empl_Identidad")
                    .IsUnique();

                entity.Property(e => e.empl_Apellido)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empl_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empl_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.empl_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empl_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empl_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empl_Identidad)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empl_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empl_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empl_Telefono)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_mant_tbEmpleados_carg_Id_mant_tbCargos_carg_Id");

                entity.HasOne(d => d.empl_UserCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempl_UserCreacionNavigation)
                    .HasForeignKey(d => d.empl_UserCreacion)
                    .HasConstraintName("FK_mant_tbEmpleados_empl_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.empl_UserModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempl_UserModificacionNavigation)
                    .HasForeignKey(d => d.empl_UserModificacion)
                    .HasConstraintName("FK_mant_tbEmpleados_empl_UserModificacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.estc)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.estc_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_mant_tbEmpleados_estc_Id_mant_tbEstadosCiviles_estc_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_mant_tbEmpleados_muni_Id_mant_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbEspecies>(entity =>
            {
                entity.HasKey(e => e.espe_Id)
                    .HasName("PK__tbEspeci__F8D93E0339448609");

                entity.ToTable("tbEspecies", "zool");

                entity.Property(e => e.espe_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.espe_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.espe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.espe_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.espe_UserCreacionNavigation)
                    .WithMany(p => p.tbEspeciesespe_UserCreacionNavigation)
                    .HasForeignKey(d => d.espe_UserCreacion)
                    .HasConstraintName("FK_zool_tbEspecies_espe_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.espe_UserModificacionNavigation)
                    .WithMany(p => p.tbEspeciesespe_UserModificacionNavigation)
                    .HasForeignKey(d => d.espe_UserModificacion)
                    .HasConstraintName("FK_zool_tbEspecies_espe_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.estc_Id)
                    .HasName("PK__tbEstado__5C9E18A7598AC2C9");

                entity.ToTable("tbEstadosCiviles", "mant");

                entity.Property(e => e.estc_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.estc_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.estc_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.estc_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.estc_UserCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestc_UserCreacionNavigation)
                    .HasForeignKey(d => d.estc_UserCreacion)
                    .HasConstraintName("FK_mant_tbEstadosCiviles_estc_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.estc_UserModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestc_UserModificacionNavigation)
                    .HasForeignKey(d => d.estc_UserModificacion)
                    .HasConstraintName("FK_mant_tbEstadosCiviles_estc_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbFacturas>(entity =>
            {
                entity.HasKey(e => e.fact_Id)
                    .HasName("PK__tbFactur__4BC2E72B013A7CAF");

                entity.ToTable("tbFacturas", "fact");

                entity.Property(e => e.fact_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.fact_Fecha).HasColumnType("date");

                entity.Property(e => e.fact_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.empl)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.empl_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fact_tbFacturas_empl_Id_mant_tbEmpleados_empl_Id");

                entity.HasOne(d => d.fact_UserCreacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UserCreacionNavigation)
                    .HasForeignKey(d => d.fact_UserCreacion)
                    .HasConstraintName("FK_fact_tbFacturas_fact_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.fact_UserModificacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UserModificacionNavigation)
                    .HasForeignKey(d => d.fact_UserModificacion)
                    .HasConstraintName("FK_fact_tbFacturas_fact_UserModificacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.meto)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.meto_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fact_tbFacturas_meto_Id_fact_tbMetodosPago");

                entity.HasOne(d => d.visi)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.visi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fact_tbFacturas_visi_Id_mant_tbVisitantes_visi_Id");
            });

            modelBuilder.Entity<tbFacturasDetalles>(entity =>
            {
                entity.HasKey(e => e.fade_Id)
                    .HasName("PK__tbFactur__5E4AE48494531955");

                entity.ToTable("tbFacturasDetalles", "fact");

                entity.Property(e => e.fade_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.fade_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fade_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.fade_Total).HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.fade_UserCreacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfade_UserCreacionNavigation)
                    .HasForeignKey(d => d.fade_UserCreacion)
                    .HasConstraintName("FK_fact_tbFacturasDetalles_fade_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.fade_UserModificacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfade_UserModificacionNavigation)
                    .HasForeignKey(d => d.fade_UserModificacion)
                    .HasConstraintName("FK_fact_tbFacturasDetalles_fade_UserModificacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.tick)
                    .WithMany(p => p.tbFacturasDetalles)
                    .HasForeignKey(d => d.tick_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fact_tbFacturasDetalles_tick_Id_fact_tbTickets_tick_Id");
            });

            modelBuilder.Entity<tbMantenimientos>(entity =>
            {
                entity.HasKey(e => e.mant_Id)
                    .HasName("PK__tbManten__C4A585D8826ED521");

                entity.ToTable("tbMantenimientos", "zool");

                entity.Property(e => e.mant_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.mant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.mant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.mant_Observaciones)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.arzo)
                    .WithMany(p => p.tbMantenimientos)
                    .HasForeignKey(d => d.arzo_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_zool_tbMantenimientos_arzo_Id_zool_tbAreasZoologico_arzo_Id");

                entity.HasOne(d => d.mant_UserCreacionNavigation)
                    .WithMany(p => p.tbMantenimientosmant_UserCreacionNavigation)
                    .HasForeignKey(d => d.mant_UserCreacion)
                    .HasConstraintName("FK_zool_tbMantenimientos_mant_UserModificacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.mant_UserModificacionNavigation)
                    .WithMany(p => p.tbMantenimientosmant_UserModificacionNavigation)
                    .HasForeignKey(d => d.mant_UserModificacion)
                    .HasConstraintName("FK_zool_tbMantenimientos_mant_UserCreacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.meto_Id)
                    .HasName("PK__tbMetodo__CDF43E9A99432966");

                entity.ToTable("tbMetodosPago", "fact");

                entity.Property(e => e.meto_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.meto_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.meto_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.meto_UserCreacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UserCreacionNavigation)
                    .HasForeignKey(d => d.meto_UserCreacion)
                    .HasConstraintName("FK_fact_tbMetodosPago_meto_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.meto_UserModificacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UserModificacionNavigation)
                    .HasForeignKey(d => d.meto_UserModificacion)
                    .HasConstraintName("FK_fact_tbMetodosPago_meto_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_Id)
                    .HasName("PK__tbMunici__CF2E0951B53283F9");

                entity.ToTable("tbMunicipios", "mant");

                entity.Property(e => e.muni_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.dept_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbMunicipios_dept_Id_mant_tbDepartamentos_dept_Id");

                entity.HasOne(d => d.muni_UserCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UserCreacionNavigation)
                    .HasForeignKey(d => d.muni_UserCreacion)
                    .HasConstraintName("FK_mant_tbMunicipios_muni_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.muni_UserModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UserModificacionNavigation)
                    .HasForeignKey(d => d.muni_UserModificacion)
                    .HasConstraintName("FK_mant_tbMunicipios_muni_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK__tbPantal__64687FD293C254F3");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant_UserCreacionNavigation)
                    .WithMany(p => p.tbPantallaspant_UserCreacionNavigation)
                    .HasForeignKey(d => d.pant_UserCreacion)
                    .HasConstraintName("FK_acce_tbPantallas_pant_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.pant_UserModificacionNavigation)
                    .WithMany(p => p.tbPantallaspant_UserModificacionNavigation)
                    .HasForeignKey(d => d.pant_UserModificacion)
                    .HasConstraintName("FK_acce_tbPantallas_pant_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPlantas>(entity =>
            {
                entity.HasKey(e => e.plan_Id)
                    .HasName("PK__tbPlanta__BE9E9335CE51FF86");

                entity.ToTable("tbPlantas", "bota");

                entity.HasIndex(e => e.plan_NombreCientifico, "UK_bota_tbPlantas_plan_NombreCientifico")
                    .IsUnique();

                entity.Property(e => e.plan_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.plan_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.plan_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.plan_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.plan_NombreCientifico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.plan_Reino)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.arbo)
                    .WithMany(p => p.tbPlantas)
                    .HasForeignKey(d => d.arbo_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_bota_tbPlantas_arbo_Id_bota_tbAreasBotanicas_arbo_Id");

                entity.HasOne(d => d.cuid)
                    .WithMany(p => p.tbPlantas)
                    .HasForeignKey(d => d.cuid_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_bota_tbPlantas_cuid_Id_bota_tbCuidado_cuid_Id");

                entity.HasOne(d => d.plan_UserCreacionNavigation)
                    .WithMany(p => p.tbPlantasplan_UserCreacionNavigation)
                    .HasForeignKey(d => d.plan_UserCreacion)
                    .HasConstraintName("FK_bota_tbPlantas_plan_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.plan_UserModificacionNavigation)
                    .WithMany(p => p.tbPlantasplan_UserModificacionNavigation)
                    .HasForeignKey(d => d.plan_UserModificacion)
                    .HasConstraintName("FK_bota_tbPlantas_plan_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK__tbRoles__760F99A40B9A4EE7");

                entity.ToTable("tbRoles", "acce");

                entity.Property(e => e.role_Descripcion)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.role_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.role_UserCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UserCreacionNavigation)
                    .HasForeignKey(d => d.role_UserCreacion)
                    .HasConstraintName("FK_acce_tbRoles_role_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.role_UserModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UserModificacionNavigation)
                    .HasForeignKey(d => d.role_UserModificacion)
                    .HasConstraintName("FK_acce_tbRoles_role_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbRolesPantallas>(entity =>
            {
                entity.HasKey(e => e.ropa_Id)
                    .HasName("PK__tbRolesP__05727229E71D6617");

                entity.ToTable("tbRolesPantallas", "acce");

                entity.Property(e => e.ropa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ropa_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.ropa_UserCreacionNavigation)
                    .WithMany(p => p.tbRolesPantallasropa_UserCreacionNavigation)
                    .HasForeignKey(d => d.ropa_UserCreacion)
                    .HasConstraintName("FK_acce_tbRolesPantallas_ropa_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.ropa_UserModificacionNavigation)
                    .WithMany(p => p.tbRolesPantallasropa_UserModificacionNavigation)
                    .HasForeignKey(d => d.ropa_UserModificacion)
                    .HasConstraintName("FK_acce_tbRolesPantallas_ropa_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbTickets>(entity =>
            {
                entity.HasKey(e => e.tick_Id)
                    .HasName("PK__tbTicket__26D61C66373309B8");

                entity.ToTable("tbTickets", "fact");

                entity.Property(e => e.tick_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.tick_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.tick_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.tick_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.tick_Precio).HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.tick_UserCreacionNavigation)
                    .WithMany(p => p.tbTicketstick_UserCreacionNavigation)
                    .HasForeignKey(d => d.tick_UserCreacion)
                    .HasConstraintName("FK_fact_tbTickets_tick_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.tick_UserModificacionNavigation)
                    .WithMany(p => p.tbTicketstick_UserModificacionNavigation)
                    .HasForeignKey(d => d.tick_UserModificacion)
                    .HasConstraintName("FK_fact_tbTickets_tick_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.usua_Id)
                    .HasName("PK__tbUsuari__EA3EC7A29B3CFFBA");

                entity.ToTable("tbUsuarios", "acce");

                entity.HasIndex(e => e.usua_NombreUsuario, "UK_acce_tbUsuarios_usua_NombreUsuario")
                    .IsUnique();

                entity.Property(e => e.usua_Contraseña).IsRequired();

                entity.Property(e => e.usua_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.usua_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.usua_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.usua_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.usua_UserCreacionNavigation)
                    .WithMany(p => p.Inverseusua_UserCreacionNavigation)
                    .HasForeignKey(d => d.usua_UserCreacion)
                    .HasConstraintName("FK_acce_tbUsuarios_usua_UserCreacion");

                entity.HasOne(d => d.usua_UserModificacionNavigation)
                    .WithMany(p => p.Inverseusua_UserModificacionNavigation)
                    .HasForeignKey(d => d.usua_UserModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_usua_UserModificacion");
            });

            modelBuilder.Entity<tbVisitantes>(entity =>
            {
                entity.HasKey(e => e.visi_Id)
                    .HasName("PK__tbVisita__0B633A07F0C52377");

                entity.ToTable("tbVisitantes", "mant");

                entity.HasIndex(e => e.visi_Identidad, "UK_mant_tbVisitantes_visi_Identidad")
                    .IsUnique();

                entity.Property(e => e.visi_Apellido)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.visi_Direccion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.visi_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.visi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.visi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.visi_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.visi_Identidad)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.visi_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.visi_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.visi_Telefono)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.estc)
                    .WithMany(p => p.tbVisitantes)
                    .HasForeignKey(d => d.estc_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_mant_tbVisitantes_estc_Id_mant_tbEstadosCiviles_estc_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbVisitantes)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_mant_tbVisitantes_muni_Id_mant_tbMunicipios_muni_Id");

                entity.HasOne(d => d.visi_UserCreacionNavigation)
                    .WithMany(p => p.tbVisitantesvisi_UserCreacionNavigation)
                    .HasForeignKey(d => d.visi_UserCreacion)
                    .HasConstraintName("FK_mant_tbVisitantes_visi_UserCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.visi_UserModificacionNavigation)
                    .WithMany(p => p.tbVisitantesvisi_UserModificacionNavigation)
                    .HasForeignKey(d => d.visi_UserModificacion)
                    .HasConstraintName("FK_mant_tbVisitantes_visi_UserModificacion_acce_tbUsuarios_usua_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}